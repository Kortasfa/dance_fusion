/*func echo(w http.ResponseWriter, r *http.Request) {
	c, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Print("upgrade:", err)
		return
	}
	defer c.Close()
	for {
		mt, message, err := c.ReadMessage()
		if err != nil {
			log.Println("read:", err)
			break
		}
		log.Printf("recv: %s", message)
		err = c.WriteMessage(mt, message)
		if err != nil {
			log.Println("write:", err)
			break
		}
	}
}

func home(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseFiles("pages/index.html")
	if err != nil {
		http.Error(w, "Internal Server Error", 500)
		log.Println(err.Error())
		return
	}
	err = tmpl.Execute(w, "wss://"+r.Host+"/echo")
	if err != nil {
		http.Error(w, "Internal Server Error", 500)
		log.Println(err.Error())
		return
	}
}*/

















<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <script>
        window.addEventListener("load", function(evt) {

            var output = document.getElementById("output");
            var input = document.getElementById("input");
            var ws;

            var print = function(message) {
                var d = document.createElement("div");
                d.textContent = message;
                output.appendChild(d);
                output.scroll(0, output.scrollHeight);
            };

            document.getElementById("open").onclick = function(evt) {
                if (ws) {
                    return false;
                }
                ws = new WebSocket("{{.}}");
                ws.onopen = function(evt) {
                    print("OPEN");
                }
                ws.onclose = function(evt) {
                    print("CLOSE");
                    ws = null;
                }
                ws.onmessage = function(evt) {
                    print("RESPONSE: " + evt.data);
                }
                ws.onerror = function(evt) {
                    print("ERROR: " + evt.data);
                }
                return false;
            };

            document.getElementById("send").onclick = function(evt) {
                if (!ws) {
                    return false;
                }
                print("SEND: " + input.value);
                ws.send(input.value);
                return false;
            };

            document.getElementById("close").onclick = function(evt) {
                if (!ws) {
                    return false;
                }
                ws.close();
                return false;
            };

        });
    </script>
</head>
<body>
<video id="video" autoplay="" muted="" name="media" controls="">
    <source src="https://sneakpeak.justdancenow.com/forgetyou_1b96c34794d16d80090316e5cbedb6a4b472eada.mp4" type="video/mp4">
</video>
<table>
    <tr><td valign="top" width="50%">
        <p>Click "Open" to create a connection to the server,
            "Send" to send a message to the server and "Close" to close the connection.
            You can change the message and send multiple times.
        <p>
        <form>
            <button id="open">Open</button>
            <button id="close">Close</button>
            <p><input id="input" type="text" value="Hello world!">
                <button id="send">Send</button>
        </form>
    </td><td valign="top" width="50%">
        <div id="output" style="max-height: 70vh;overflow-y: scroll;"></div>
    </td></tr></table>
</body>
</html>

















<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <title>Go WebSocket Tutorial</title>
</head>
<body>
<h2>Hello World</h2>

<script>
  let socket = new WebSocket("ws://127.0.0.1:3000/test");
  console.log("Attempting Connection...");

  socket.onopen = () => {
    console.log("Successfully Connected");
    socket.send("Hi From the Client!")
  };

  socket.onclose = event => {
    console.log("Socket Closed Connection: ", event);
    socket.send("Client Closed!")
  };

  socket.onerror = error => {
    console.log("Socket Error: ", error);
  };

</script>
</body>
</html>















<!DOCTYPE html>
<html>
<head>
  <title>Отклонение устройства</title>
</head>
<body>
<p>This Example just print's the raw accelerometer and gyro data.<br>Will return null if no device information is found.</p>
<p>gyro.getFeatures: <span id="features"></span></p>
<span id="example"></span>


<script>
  (function () {
    function e() {
      window.addEventListener("MozOrientation", function (c) {
        d.push("MozOrientation"), a.x = c.x - b.x, a.y = c.y - b.y, a.z = c.z - b.z
      }, !0), window.addEventListener("devicemotion", function (c) {
        d.push("devicemotion"), a.x = c.accelerationIncludingGravity.x - b.x, a.y = c.accelerationIncludingGravity.y - b.y, a.z = c.accelerationIncludingGravity.z - b.z
      }, !0), window.addEventListener("deviceorientation", function (c) {
        d.push("deviceorientation"), a.alpha = c.alpha - b.alpha, a.beta = c.beta - b.beta, a.gamma = c.gamma - b.gamma
      }, !0)
    }

    var a = {x: null, y: null, z: null, alpha: null, beta: null, gamma: null},
            b = {x: 0, y: 0, z: 0, alpha: 0, beta: 0, gamma: 0}, c = null, d = [];
    window.gyro = {}, gyro.frequency = 1, gyro.calibrate = function () {
      for (var c in a) b[c] = typeof a[c] == "number" ? a[c] : 0
    }, gyro.getOrientation = function () {
      return a
    }, gyro.startTracking = function (b) {
      c = setInterval(function () {
        b(a)
      }, gyro.frequency)
    }, gyro.stopTracking = function () {
      clearInterval(c)
    }, gyro.hasFeature = function (a) {
      for (var b in d) if (a == d[b]) return !0;
      return !1
    }, gyro.getFeatures = function () {
      return d
    }, e()
  })(window)

  gyro.startTracking(function(o) {
    var b = document.getElementById('example'),
            f = document.getElementById('features');
    f.innerHTML = gyro.getFeatures();
    b.innerHTML =
            "<p> x = " + o.x + "</p>" +
            "<p> y = " + o.y + "</p>" +
            "<p> z = " + o.z + "</p>" +
            "<p> alpha = " + o.alpha + "</p>" +
            "<p> beta = " + o.beta + "</p>" +
            "<p> gamma = " + o.gamma + "</p>";
  });
</script>
</body>
</html>